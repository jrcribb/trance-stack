name: Ephemeral Deployments

on:
  pull_request:
    types: [opened, synchronize, reopened, closed]
  push:
    branches-ignore:
      - main
      - alpha
      - beta
env:
  LEFTHOOK: 0
  GITHUB_STEP_SUMMARY: $GITHUB_STEP_SUMMARY

jobs:
  deploy:
    name: Deploy ${{ github.ref_name }} to an ephemeral environment
    runs-on: 'ubuntu-latest'
    steps:
      - uses: actions/checkout@v3
      - name: ðŸ”§ Set up node
        uses: meza/action-setup-node-npm@main
        with:
          node-version: latest
          cache-name: ${{ needs.verify.outputs.cache-name }}
      - name: ðŸ”¢ Set version
        run: npm version --no-git-tag-version 0.0.0-${{ github.ref_name }}-development
      - name: ðŸ”¨ Build
        run: npm run build
        env:
          NODE_ENV: production
          SPLIT_SERVER_TOKEN: ${{ secrets.SPLIT_SERVER_TOKEN }}
          SESSION_SECRET: ${{ secrets.SESSION_SECRET }}
          HOTJAR_ID: ${{ vars.HOTJAR_ID }}
          MIXPANEL_API: ${{ vars.MIXPANEL_API }}
          MIXPANEL_TOKEN: ${{ vars.MIXPANEL_TOKEN }}
          COOKIEYES_TOKEN: ${{ vars.COOKIEYES_TOKEN }}
          I18N_DEBUG: 'true'
          SPLIT_DEBUG: 'true'
      - name: ðŸ“¦ Deploy ${{ github.ref_name }}
        run: npx cdk deploy remix-trance-stack-ephemeral -O deployment.result.json --require-approval never --context environmentName=${{ github.ref_name }} --context domainName=${{ vars.AWS_DOMAIN_NAME }} --context certificateArn=${{ secrets.AWS_CERT_ARN }} --context hostedZoneName=${{ vars.AWS_HOSTED_ZONE_NAME }}
        env:
          GITHUB_STEP_SUMMARY: $GITHUB_STEP_SUMMARY
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
